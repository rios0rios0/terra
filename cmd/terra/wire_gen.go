// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/rios0rios0/terra/internal"
	"github.com/rios0rios0/terra/internal/domain/commands"
	"github.com/rios0rios0/terra/internal/domain/entities"
	"github.com/rios0rios0/terra/internal/infrastructure/controllers"
	"github.com/rios0rios0/terra/internal/infrastructure/repositories"
)

// Injectors from wire.go:

func injectAppContext() entities.AppContext {
	deleteCacheCommand := commands.NewDeleteCacheCommand()
	deleteCacheController := controllers.NewDeleteCacheController(deleteCacheCommand)
	stdShellRepository := repositories.NewStdShellRepository()
	formatFilesCommand := commands.NewFormatFilesCommand(stdShellRepository)
	v := _wireValue
	formatFilesController := controllers.NewFormatFilesController(formatFilesCommand, v)
	installDependenciesCommand := commands.NewInstallDependenciesCommand()
	installDependenciesController := controllers.NewInstallDependenciesController(installDependenciesCommand, v)
	v2 := controllers.NewControllers(deleteCacheController, formatFilesController, installDependenciesController)
	appInternal := internal.NewAppInternal(v2)
	appContext := newAppContext(appInternal)
	return appContext
}

var (
	_wireValue = []entities.Dependency{
		{
			Name:              "Terraform",
			CLI:               "terraform",
			BinaryURL:         "https://releases.hashicorp.com/terraform/%[1]s/terraform_%[1]s_linux_amd64.zip",
			VersionURL:        "https://checkpoint-api.hashicorp.com/v1/check/terraform",
			RegexVersion:      `"current_version":"([^"]+)"`,
			FormattingCommand: []string{"fmt", "-recursive"},
		},
		{
			Name:              "Terragrunt",
			CLI:               "terragrunt",
			BinaryURL:         "https://github.com/gruntwork-io/terragrunt/releases/download/v%s/terragrunt_linux_amd64",
			VersionURL:        "https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest",
			RegexVersion:      `"tag_name":"v([^"]+)"`,
			FormattingCommand: []string{"hclfmt", "**/*.hcl"},
		},
	}
)

func injectRootController() entities.Controller {
	installDependenciesCommand := commands.NewInstallDependenciesCommand()
	stdShellRepository := repositories.NewStdShellRepository()
	formatFilesCommand := commands.NewFormatFilesCommand(stdShellRepository)
	settings := entities.NewSettings()
	cli := entities.NewCLI(settings)
	runAdditionalBeforeCommand := commands.NewRunAdditionalBeforeCommand(settings, cli, stdShellRepository)
	runFromRootCommand := commands.NewRunFromRootCommand(installDependenciesCommand, formatFilesCommand, runAdditionalBeforeCommand, stdShellRepository)
	v := _wireValue
	runFromRootController := controllers.NewRunFromRootController(runFromRootCommand, v)
	controller := newRootController(runFromRootController)
	return controller
}

// wire.go:

func newAppContext(appInternal *internal.AppInternal) entities.AppContext {
	return appInternal
}

func newRootController(rootController *controllers.RunFromRootController) entities.Controller {
	return rootController
}
